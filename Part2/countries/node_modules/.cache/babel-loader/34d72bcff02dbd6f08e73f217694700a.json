{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alexw\\\\OneDrive\\\\Documents\\\\AlexW Code\\\\Full-Stack-Answers\\\\Part2\\\\countries\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\n/* fetching weather is blocking the ui from rendering\nand endless rerendering */\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport Form from './components/SearchForm';\nimport Countries from './components/Country';\n\nconst matchSearch = (name, search) => {\n  //if they type in a \\ escape character at end it breaks it\n  return name.match(new RegExp(search, 'i'));\n};\n\nconst App = () => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const [showSearch, hasSearched] = useState(false);\n  const [countries, setCountries] = useState([]);\n\n  const countryHook = () => {\n    //get the json back from the endpoint\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      console.log('status for getting countries', response.status);\n      setCountries(response.data);\n      console.log(response.data);\n    });\n  };\n\n  useEffect(countryHook, []);\n\n  const handleSearch = event => {\n    setSearch(event.target.value); //weatherHook(event.target.value)\n\n    hasSearched(true);\n  };\n\n  const handleClick = name => {\n    setSearch(name); //change the query to the countries name\n  };\n\n  const getResults = () => {\n    countries.forEach(c => {\n      if (c.name.toUpperCase() === search.toUpperCase()) {\n        console.log(c);\n        return c;\n      }\n    });\n    return countries.filter(c => matchSearch(c.name, search));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      newSearch: search,\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      result: showSearch ? getResults() : countries,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"lrEL9aFWbICY73UCpP4DW3Cy2Yw=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/alexw/OneDrive/Documents/AlexW Code/Full-Stack-Answers/Part2/countries/src/index.js"],"names":["React","useState","useEffect","ReactDOM","axios","Form","Countries","matchSearch","name","search","match","RegExp","App","setSearch","showSearch","hasSearched","countries","setCountries","countryHook","get","then","response","console","log","status","data","handleSearch","event","target","value","handleClick","getResults","forEach","c","toUpperCase","filter","render","document","getElementById"],"mappings":";;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACpC;AACA,SAAOD,IAAI,CAACE,KAAL,CAAW,IAAIC,MAAJ,CAAWF,MAAX,EAAmB,GAAnB,CAAX,CAAP;AACD,CAHD;;AAKA,MAAMG,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACH,MAAD,EAASI,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,UAAD,EAAaC,WAAb,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;;AAGA,QAAMiB,WAAW,GAAG,MAAM;AAAE;AAC1Bd,IAAAA,KAAK,CACFe,GADH,CACO,sCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,QAAQ,CAACG,MAArD;AACAP,MAAAA,YAAY,CAACI,QAAQ,CAACI,IAAV,CAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACI,IAArB;AACD,KANH;AAOD,GARD;;AAUAvB,EAAAA,SAAS,CAACgB,WAAD,EAAc,EAAd,CAAT;;AAEA,QAAMQ,YAAY,GAAIC,KAAD,IAAW;AAC9Bd,IAAAA,SAAS,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT,CAD8B,CAE9B;;AACAd,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAMA,QAAMe,WAAW,GAAItB,IAAD,IAAU;AAC5BK,IAAAA,SAAS,CAACL,IAAD,CAAT,CAD4B,CAE5B;AACD,GAHD;;AAMA,QAAMuB,UAAU,GAAG,MAAM;AACvBf,IAAAA,SAAS,CAACgB,OAAV,CAAkBC,CAAC,IAAI;AACrB,UAAIA,CAAC,CAACzB,IAAF,CAAO0B,WAAP,OAAyBzB,MAAM,CAACyB,WAAP,EAA7B,EAAmD;AACjDZ,QAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACA,eAAOA,CAAP;AACD;AACF,KALD;AAMA,WAAOjB,SAAS,CAACmB,MAAV,CAAiBF,CAAC,IAAI1B,WAAW,CAAC0B,CAAC,CAACzB,IAAH,EAASC,MAAT,CAAjC,CAAP;AACD,GARD;;AAWA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEA,MAAjB;AAAyB,MAAA,YAAY,EAAEiB;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEZ,UAAU,GAAGiB,UAAU,EAAb,GAAkBf,SAA/C;AAA0D,MAAA,WAAW,EAAEc;AAAvE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAhDD;;GAAMlB,G;;KAAAA,G;AAkDNT,QAAQ,CAACiC,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["/* fetching weather is blocking the ui from rendering\nand endless rerendering */\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios'\nimport Form from './components/SearchForm';\nimport Countries from './components/Country'\n\nconst matchSearch = (name, search) => {\n  //if they type in a \\ escape character at end it breaks it\n  return name.match(new RegExp(search, 'i'))\n}\n\nconst App = () => {\n\n  const [search, setSearch] = useState('')\n  const [showSearch, hasSearched] = useState(false);\n  const [countries, setCountries] = useState([]);\n\n\n  const countryHook = () => { //get the json back from the endpoint\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('status for getting countries', response.status)\n        setCountries(response.data)\n        console.log(response.data)\n      })\n  }\n\n  useEffect(countryHook, [])\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n    //weatherHook(event.target.value)\n    hasSearched(true)\n  }\n\n  const handleClick = (name) => {\n    setSearch(name)\n    //change the query to the countries name\n  }\n\n\n  const getResults = () => {\n    countries.forEach(c => {\n      if (c.name.toUpperCase() === search.toUpperCase()) {\n        console.log(c)\n        return c;\n      }\n    })\n    return countries.filter(c => matchSearch(c.name, search));\n  }\n\n\n  return (\n    <>\n      <Form newSearch={search} handleSearch={handleSearch} />\n      <Countries result={showSearch ? getResults() : countries} handleClick={handleClick} />\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}