{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alexw\\\\OneDrive\\\\Documents\\\\AlexW Code\\\\Full-Stack-Answers\\\\Part2\\\\countries\\\\src\\\\components\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nconst WEATHERAPIKEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nconst Weather = ({\n  query\n}) => {\n  _s();\n\n  const [data, setData] = useState(null);\n\n  const weatherHook = () => {\n    //if countries . length == 1\n    axios.get(`http://api.weatherstack.com/current?access_key=${WEATHERAPIKEY}&query=${query}`) //tempelate string, query is the capital\n    .then(response => {\n      console.log(response.data);\n      setData(response.data);\n    }).catch(error => {\n      console.log('couldnt fetch weather', error);\n    });\n  };\n\n  useEffect(weatherHook, [query]);\n  return /*#__PURE__*/_jsxDEV(WeatherData, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 11\n  }, this);\n};\n\n_s(Weather, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = Weather;\n\nconst WeatherData = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Weather in \", data.location.name, \" now\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [data.current.temperature, \" temperature\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.current.weather_icons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = WeatherData;\nexport default Weather;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Weather\");\n$RefreshReg$(_c2, \"WeatherData\");","map":{"version":3,"sources":["C:/Users/alexw/OneDrive/Documents/AlexW Code/Full-Stack-Answers/Part2/countries/src/components/Weather.js"],"names":["axios","React","useEffect","useState","WEATHERAPIKEY","process","env","REACT_APP_WEATHER_API_KEY","Weather","query","data","setData","weatherHook","get","then","response","console","log","catch","error","WeatherData","location","name","current","temperature","weather_icons"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAlC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AACzB,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAA/B;;AAEA,QAAMS,WAAW,GAAG,MAAM;AACtB;AAEEZ,IAAAA,KAAK,CACFa,GADH,CACQ,kDAAiDT,aAAc,UAASK,KAAM,EADtF,EACyF;AADzF,KAEGK,IAFH,CAEQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACL,IAArB;AACAC,MAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACD,KALH,EAMGQ,KANH,CAMSC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCE,KAArC;AACD,KARH;AAUH,GAbH;;AAeEjB,EAAAA,SAAS,CAACU,WAAD,EAAc,CAACH,KAAD,CAAd,CAAT;AAEA,sBACI,QAAC,WAAD;AAAa,IAAA,IAAI,EAAIC;AAArB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGL,CAvBD;;GAAMF,O;;KAAAA,O;;AA0BN,MAAMY,WAAW,GAAG,CAAC;AAACV,EAAAA;AAAD,CAAD,KAAY;AAC5B,sBACI;AAAA,4BACI;AAAA,gCAAgBA,IAAI,CAACW,QAAL,CAAcC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBAAIZ,IAAI,CAACa,OAAL,CAAaC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAId,IAAI,CAACa,OAAL,CAAaE;AAAjB;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CARD;;MAAML,W;AAUN,eAAeZ,OAAf","sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst WEATHERAPIKEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nconst Weather = ({query}) => {\r\n    const[data, setData] = useState(null)\r\n\r\n    const weatherHook = () => {\r\n        //if countries . length == 1\r\n    \r\n          axios\r\n            .get(`http://api.weatherstack.com/current?access_key=${WEATHERAPIKEY}&query=${query}`) //tempelate string, query is the capital\r\n            .then(response => {\r\n              console.log(response.data)\r\n              setData(response.data)\r\n            })\r\n            .catch(error => {\r\n              console.log('couldnt fetch weather', error)\r\n            })\r\n        \r\n      }\r\n\r\n      useEffect(weatherHook, [query])\r\n    \r\n      return (\r\n          <WeatherData data = {data} />\r\n      )\r\n}\r\n      \r\n\r\nconst WeatherData = ({data}) => {\r\n    return (\r\n        <>\r\n            <h1>Weather in {data.location.name} now</h1>\r\n            <p>{data.current.temperature} temperature</p>\r\n            <p>{data.current.weather_icons}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather"]},"metadata":{},"sourceType":"module"}