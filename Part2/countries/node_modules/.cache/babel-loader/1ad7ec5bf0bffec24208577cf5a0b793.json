{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alexw\\\\OneDrive\\\\Documents\\\\AlexW Code\\\\Full-Stack-Answers\\\\Part2\\\\countries\\\\src\\\\components\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nconst WEATHERAPIKEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nconst Weather = ({\n  query\n}) => {\n  _s();\n\n  const [search, setSearch] = useState(query);\n  const [data, setData] = useState(null);\n  console.log(data);\n  const [hasChanged, setChanged] = useState(false);\n\n  const weatherHook = () => {\n    //if countries . length == 1\n    axios.get(`http://api.weatherstack.com/current?access_key=${WEATHERAPIKEY}&query=${search}`) //tempelate string, query is the capital\n    .then(response => {\n      console.log(response.data);\n      setData(response.data);\n    }).catch(error => {\n      console.log('couldnt fetch weather', error);\n    });\n  };\n\n  useEffect(weatherHook, [search]);\n\n  const handleSearch = event => {\n    setChanged(true);\n    setSearch(event.target.value);\n  };\n\n  if (data !== null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" Search for city \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: hasChanged ? data : query,\n            onChange: handleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeatherData, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" couldnt fetch Weather data for \", data, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Weather, \"RE1Q6CJJO93jLzZNHW4NvF/Wm9g=\");\n\n_c = Weather;\n\nconst WeatherData = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Weather in \", data.location.name, \" now\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [data.current.temperature, \" temperature\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.current.weather_icons,\n      alt: data.current.weather_descriptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = WeatherData;\nexport default Weather;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Weather\");\n$RefreshReg$(_c2, \"WeatherData\");","map":{"version":3,"sources":["C:/Users/alexw/OneDrive/Documents/AlexW Code/Full-Stack-Answers/Part2/countries/src/components/Weather.js"],"names":["axios","React","useEffect","useState","WEATHERAPIKEY","process","env","REACT_APP_WEATHER_API_KEY","Weather","query","search","setSearch","data","setData","console","log","hasChanged","setChanged","weatherHook","get","then","response","catch","error","handleSearch","event","target","value","WeatherData","location","name","current","temperature","weather_icons","weather_descriptions"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAlC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACM,KAAD,CAApC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAD,CAAhC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAM,CAACI,UAAD,EAAaC,UAAb,IAA2Bd,QAAQ,CAAC,KAAD,CAAzC;;AAEA,QAAMe,WAAW,GAAG,MAAM;AACtB;AAEAlB,IAAAA,KAAK,CACAmB,GADL,CACU,kDAAiDf,aAAc,UAASM,MAAO,EADzF,EAC4F;AAD5F,KAEKU,IAFL,CAEUC,QAAQ,IAAI;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,QAAQ,CAACT,IAArB;AACAC,MAAAA,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;AACH,KALL,EAMKU,KANL,CAMWC,KAAK,IAAI;AACZT,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCQ,KAArC;AACH,KARL;AAUH,GAbD;;AAeArB,EAAAA,SAAS,CAACgB,WAAD,EAAc,CAACR,MAAD,CAAd,CAAT;;AAEA,QAAMc,YAAY,GAAIC,KAAD,IAAW;AAC5BR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,SAAS,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACH,GAHD;;AAKA,MAAIf,IAAI,KAAK,IAAb,EAAmB;AACf,wBACI;AAAA,8BACI;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,KAAK,EAAII,UAAU,GAAGJ,IAAH,GAAUH,KAApC;AAA2C,YAAA,QAAQ,EAAIe;AAAvD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEZ;AAAnB;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA,oBADJ;AAWH;;AAED,sBACI;AAAA,mDAAoCA,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA7CD;;GAAMJ,O;;KAAAA,O;;AAgDN,MAAMoB,WAAW,GAAG,CAAC;AAAEhB,EAAAA;AAAF,CAAD,KAAc;AAC9B,sBACI;AAAA,4BACI;AAAA,gCAAgBA,IAAI,CAACiB,QAAL,CAAcC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBAAIlB,IAAI,CAACmB,OAAL,CAAaC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,GAAG,EAAEpB,IAAI,CAACmB,OAAL,CAAaE,aAAvB;AAAsC,MAAA,GAAG,EAAErB,IAAI,CAACmB,OAAL,CAAaG;AAAxD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAQH,CATD;;MAAMN,W;AAWN,eAAepB,OAAf","sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst WEATHERAPIKEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nconst Weather = ({ query }) => {\r\n    const [search, setSearch] = useState(query)\r\n    const [data, setData] = useState(null)\r\n    console.log(data)\r\n    const [hasChanged, setChanged] = useState(false)\r\n\r\n    const weatherHook = () => {\r\n        //if countries . length == 1\r\n\r\n        axios\r\n            .get(`http://api.weatherstack.com/current?access_key=${WEATHERAPIKEY}&query=${search}`) //tempelate string, query is the capital\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setData(response.data)\r\n            })\r\n            .catch(error => {\r\n                console.log('couldnt fetch weather', error)\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(weatherHook, [search])\r\n\r\n    const handleSearch = (event) => {\r\n        setChanged(true)\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    if (data !== null) {\r\n        return (\r\n            <>\r\n                <form>\r\n                    <div>\r\n                        <p> Search for city </p>\r\n                        <input value = {hasChanged ? data : query} onChange = {handleSearch} ></input>\r\n                    </div>\r\n                </form>\r\n                <WeatherData data={data} />\r\n            </>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <p> couldnt fetch Weather data for {data} </p>\r\n    )\r\n}\r\n\r\n\r\nconst WeatherData = ({ data }) => {\r\n    return (\r\n        <>\r\n            <h1>Weather in {data.location.name} now</h1>\r\n            <p>{data.current.temperature} temperature</p>\r\n            <img src={data.current.weather_icons} alt={data.current.weather_descriptions}></img>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather"]},"metadata":{},"sourceType":"module"}